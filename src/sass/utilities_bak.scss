@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
$prefix: 'wb-';
$spacer: 8px;
@function gen-spacers($spacer, $len: 20) {
  $spacers: ();
  @for $i from 1 through $len {
    // $spacers: list.append($spacers, $i * $spacer);
    $spacers: map.set($spacers, $i, $i * $spacer)
  }
  // $spacers: list.join((0, $spacer * 0.5), $spacers);
  // $spacers
  $spacers: map.set($spacers, '', $spacers);
  $spacers: map.set($spacers, '0\\.5', $spacers * 0.5);
  @return $spacers;
}
$spacers: gen-spacers($spacer);
$colorMap: (
  'blue': (
    '': #005ec1,
    50: #005ec1,
    100: #007cff,
    150: #56a6fa,
    200: #dfefff,
    250: #f0f8ff,
  ),
  'green': (
    '': #0d757e,
    50: #0d757e,
    100: #10a0ad,
    150: #51b9c3,
    200: #d8f3f2,
    250: #eefdfe,
  ),
  'orange': (
    '': #d36b08,
    50: #d36b08,
    100: #ffa940,
    150: #fec861,
    200: #fff3de,
    250: #fcf9f3,
  ),
  'red': (
    '': #cf2c2c,
    50: #cf2c2c,
    100: #e54e4e,
    150: #f87871,
    200: #ffe7e7,
    250: #fff8f8,
  ),
);
$border-radius: (0 2px 4px 30px);
$classList: (
  (
    class: 'bg',
    value: $colorMap,
    property: 'background-color',
    afterSep: '-',
  ),
  (
    class: 'border',
    value: $colorMap,
    property: 'border-color',
    afterSep: '-',
  ),
  (
    class: 'mt',
    value: $spacers,
    property: 'margin-top',
  ),
  (
    class: 'mb',
    value: $spacers,
    property: 'margin-bottom'
  ),
  (
    class: 'ml',
    value: $spacers,
    property: 'margin-left'
  ),
  (
    class: 'mr',
    value: $spacers,
    property: 'margin-right'
  ),
  (
    class: 'mx',
    value: $spacers,
    property: 'margin-left' 'margin-right'
  ),
  (
    class: 'my',
    value: $spacers,
    property: 'margin-top' 'margin-bottom'
  ),
  (
    class: 'mx-auto',
    value: 'auto',
    property: 'margin-top' 'margin-bottom'
  )
);

@mixin class-gen($classList, $prefix: '') {
  @each $item in $classList {
    $class: map.get($item, class);
    $property: map.get($item, property);
    $afterSep: map.get($item, afterSep);
    $values: map.get($item, value);
    @if $afterSep == null {
      $afterSep: '';
    }
    @if meta.type-of($values) == map {
      @each $name, $map in $values {
        // @debug $name;
        // @debug $map;

        @each $key, $value in $map {
          // @debug meta.type-of($property);
          $separator: '-';
          @if meta.type-of($key) == string {
            $separator: '';
            // @debug $separator;
          }
          .#{$prefix}#{$class}#{$afterSep}#{$name}#{$separator}#{$key} {
            #{$property}: $value;
          }
        }
      }
    } @else if meta.type-of($values) == list {
      $length: list.length($values);
      @for $i from 1 through $length {
        $changeSymbol: $i;
        @if $i == 1 {
          $changeSymbol: $changeSymbol - 1;
        } @else if $i == 2 {
          $changeSymbol: '0\\.5';
        } @else if $i == 3 {
          $changeSymbol: '';
        } @else if $i > 3 {
          $changeSymbol: $changeSymbol - 2;
        }
        $afterSep: '-';
        @if $i == 3 {
          $afterSep: '';
        }
        .#{$prefix}#{$class}#{$afterSep}#{$changeSymbol} {
          @each $item in $property {
            #{$item}: list.nth($values, $i);
          }
        }
      }
    } @else if meta.type-of($values) == string {
      .#{$prefix}#{$class} {
        @each $item in $property {
          #{$item}: $values;
        }
      }
    }
  }
}
@include class-gen($classList);
